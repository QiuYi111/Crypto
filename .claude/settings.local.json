{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(docker-compose:*)",
      "Bash(docker compose:*)",
      "Bash(chmod:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(python:*)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto/src python test_phase_completion.py)",
      "Bash(uv init:*)",
      "Bash(uv:*)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto/src python -c \"\nimport sys\nsys.path.insert(0, ''/home/jingyi/Crypto/src'')\ntry:\n    from cryptorl.data.market_data import MarketDataCollector\n    print(''✅ MarketDataCollector imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing MarketDataCollector: {e}'')\n\ntry:\n    from cryptorl.data.influxdb_client import InfluxDBClient\n    print(''✅ InfluxDBClient imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing InfluxDBClient: {e}'')\n\ntry:\n    from cryptorl.data.binance_client import BinanceClient\n    print(''✅ BinanceClient imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing BinanceClient: {e}'')\n\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto/src python -c \"\nimport sys\nsys.path.insert(0, ''/home/jingyi/Crypto/src'')\nimport traceback\n\ntry:\n    from cryptorl.data.market_data import MarketDataCollector\n    print(''✅ MarketDataCollector imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing MarketDataCollector: {e}'')\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto/src python -c \"\nimport sys\nsys.path.insert(0, ''/home/jingyi/Crypto/src'')\nimport traceback\n\n# Test RL components\ntry:\n    from cryptorl.rl.models import MambaModel, MambaPolicyNetwork\n    print(''✅ Mamba Models imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing Mamba Models: {e}'')\n    traceback.print_exc()\n\ntry:\n    from cryptorl.rl.environment import CryptoTradingEnvironment\n    print(''✅ RL Environment imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing RL Environment: {e}'')\n\ntry:\n    from cryptorl.rl.agent import CryptoRLAgent\n    print(''✅ CryptoRLAgent imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing CryptoRLAgent: {e}'')\n\ntry:\n    from cryptorl.trading.execution import TradingExecutor\n    print(''✅ TradingExecutor imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing TradingExecutor: {e}'')\n\ntry:\n    from cryptorl.trading.risk_manager import RiskManager\n    print(''✅ RiskManager imported successfully'')\nexcept Exception as e:\n    print(f''❌ Error importing RiskManager: {e}'')\n\")",
      "Bash(grep:*)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/phase3_demo.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"from src.cryptorl.config.settings import settings; print(''RL settings:'', {k:v for k,v in settings.__dict__.items() if ''rl'' in k.lower()})\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"\nimport sys\nsys.path.append(''/home/jingyi/Crypto'')\nfrom src.cryptorl.rl.mamba_exploration import MambaExplorer\nfrom src.cryptorl.config.settings import settings\nimport asyncio\n\nasync def quick_test():\n    explorer = MambaExplorer(settings)\n    try:\n        # Test with minimal config\n        benchmarks = explorer.explore_architectures(\n            observation_space=20,\n            action_space=1,\n            sequence_lengths=[30],\n            batch_sizes=[1],\n            hidden_dims=[128],\n            num_layers=[2]\n        )\n        print(''✅ Mamba exploration completed successfully'')\n    except Exception as e:\n        print(f''❌ Error: {e}'')\n\nasyncio.run(quick_test())\n\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"\nimport sys\nsys.path.append(''/home/jingyi/Crypto'')\nfrom src.cryptorl.rl.mamba_exploration import MambaExplorer\nfrom src.cryptorl.config.settings import settings\nimport asyncio\n\nasync def quick_test():\n    explorer = MambaExplorer(settings)\n    try:\n        # Test with minimal config\n        benchmarks = explorer.explore_architectures(\n            observation_dim=20,\n            action_dim=1,\n            sequence_lengths=[30],\n            batch_sizes=[1],\n            hidden_dims=[128],\n            num_layers=[2]\n        )\n        print(''✅ Mamba exploration completed successfully'')\n        print(f''Generated {len(benchmarks)} benchmarks'')\n    except Exception as e:\n        print(f''❌ Error: {e}'')\n        import traceback\n        traceback.print_exc()\n\nasyncio.run(quick_test())\n\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/phase3_demo_fixed.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/phase4_demo.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/phase4_demo_simple.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"\nfrom binance.client import Client\nfrom src.cryptorl.config.settings import Settings\n\nsettings = Settings()\nprint(''Testing with mainnet (testnet=False)...'')\nclient = Client(\n    api_key=settings.binance_api_key,\n    api_secret=settings.binance_secret_key,\n    testnet=False\n)\n\ntry:\n    print(''Testing account access...'')\n    account = client.futures_account()\n    print(''Mainnet account access successful!'')\n    print(''Total balance:'', account.get(''totalWalletBalance'', ''N/A''))\nexcept Exception as e:\n    print(''Mainnet error:'', e)\n    print(''Testing basic ping...'')\n    try:\n        ping = client.ping()\n        print(''Basic ping successful - keys are valid for mainnet'')\n    except Exception as ping_error:\n        print(''Basic ping failed:'', ping_error)\n\")",
      "Bash(curl:*)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/test_api_connection.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python scripts/setup_testnet.py)",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"\nimport requests\nimport time\nfrom src.cryptorl.config.settings import Settings\n\nsettings = Settings()\nprint(''Testing testnet connection...'')\n\n# Test basic connectivity\nurl = ''https://testnet.binancefuture.com/fapi/v1/ping''\ntry:\n    response = requests.get(url, timeout=10)\n    print(''Testnet ping:'', response.status_code, response.text)\nexcept Exception as e:\n    print(''Ping error:'', e)\n\n# Test time\nurl = ''https://testnet.binancefuture.com/fapi/v1/time''\ntry:\n    response = requests.get(url, timeout=10)\n    print(''Testnet time:'', response.status_code, response.text)\nexcept Exception as e:\n    print(''Time error:'', e)\n\n# Test account with proper headers\nimport hashlib\nimport hmac\n\ntimestamp = str(int(time.time() * 1000))\nquery_string = f''timestamp={timestamp}''\nsignature = hmac.new(\n    settings.binance_secret_key.encode(''utf-8''),\n    query_string.encode(''utf-8''),\n    hashlib.sha256\n).hexdigest()\n\nurl = f''https://testnet.binancefuture.com/fapi/v1/account?{query_string}&signature={signature}''\nheaders = {''X-MBX-APIKEY'': settings.binance_api_key}\n\ntry:\n    response = requests.get(url, headers=headers, timeout=10)\n    print(''Account test:'', response.status_code)\n    if response.status_code == 200:\n        print(''✅ API keys working!'')\n    else:\n        print(''❌ API error:'', response.text)\nexcept Exception as e:\n    print(''Account error:'', e)\n\")",
      "Bash(PYTHONPATH=/home/jingyi/Crypto python -c \"\nimport requests\nimport time\nimport hashlib\nimport hmac\nfrom src.cryptorl.config.settings import Settings\n\nsettings = Settings()\n\n# Test with mainnet\nbase_url = ''https://fapi.binance.com''  # Mainnet futures\ntimestamp = str(int(time.time() * 1000))\n\n# Test account endpoint\nendpoint = ''/fapi/v2/account''\nquery_string = f''timestamp={timestamp}''\nsignature = hmac.new(\n    settings.binance_secret_key.encode(''utf-8''),\n    query_string.encode(''utf-8''),\n    hashlib.sha256\n).hexdigest()\n\nurl = f''{base_url}{endpoint}?{query_string}&signature={signature}''\nheaders = {''X-MBX-APIKEY'': settings.binance_api_key}\n\ntry:\n    response = requests.get(url, headers=headers, timeout=10)\n    print(''Mainnet account test:'', response.status_code)\n    if response.status_code == 200:\n        data = response.json()\n        print(''✅ Mainnet account access successful!'')\n        print(''Total balance:'', data.get(''totalWalletBalance'', ''N/A''))\n    elif response.status_code == 401:\n        print(''❌ Invalid API keys or permissions'')\n        print(''Response:'', response.text)\n    else:\n        print(''❌ Error:'', response.text)\nexcept Exception as e:\n    print(''Request error:'', e)\n\")",
      "Bash(ping:*)",
      "Bash(docker:*)",
      "Bash(. .venv/bin/activate)"
    ],
    "deny": []
  }
}